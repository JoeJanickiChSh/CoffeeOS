/*
    ` - 0x29
    1 - 0x02
    2 - 0x03
    3 - 0x04
    4 - 0x05
    5 - 0x06
    6 - 0x07
    7 - 0x08
    8 - 0x09
    9 - 0x0a
    0 - 0x0b
    - - 0x0c
    = - 0x0d

    q - 0x10
    w - 0x11
    e - 0x12
    r - 0x13
    t - 0x14
    y - 0x15
    u - 0x16
    i - 0x17
    o - 0x18
    p - 0x19
    [ - 0x1a
    ] - 0x1b
    \ - 0x2b

    a - 0x1e
    s - 0x1f
    d - 0x20
    f - 0x21
    g - 0x22
    h - 0x23
    j - 0x24
    k - 0x25
    l - 0x26
    ; - 0x27
    ' - 0x28

    z - 0x2c
    x - 0x2d
    c - 0x2e
    v - 0x2f
    b - 0x30
    n - 0x31
    m - 0x32
    , - 0x33
    . - 0x34
    / - 0x35

    SPACE - 0x39
    SHIFT_ON - 0x2a
    SHIFT_OFF - 0xaa
    BACKSPACE - 0x0e

*/

char keycodes[256] = {
    0, 0, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '=', 8, 0, 
    'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\n', 0, 'a', 's', 
    'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\'', '`', 0, '\\', 'z', 'x', 'c', 'v', 
    'b', 'n', 'm', ',', '.', '/', 0, 0, 0, ' ', 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

char caps[256] = {
    0, 0, 0, 0, 0, 0, 0, 0, 8, 0, '\n', 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    ' ', 0, 0, 0, 0, 0, 0, '"', 0, 0, 0, 0, '<', '_', '>', '?', 
    ')', '!', '@', '#', '$', '%', '^', '&', '*', '(', 0, ':', 0, '+', 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '{', '|', '}', 0, 0, 
    '~', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 
    'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

unsigned char shift_key = 0;

void keyboard_init()
{
    inb(0x64);
}

unsigned char keyboard_raw()
{
    return inb(0x60);
}

char keyboard_get()
{
    unsigned char data = keyboard_raw();
    char out;

    if(data == 0x2a)
    {
        shift_key = 1;
        return 0;
    }
    if(data == 0xaa)
    {
        shift_key = 0;
        return 0;
    }
    return (shift_key) ? caps[keycodes[data]] : keycodes[data];

}


unsigned char keyboard_arrow()
{
    unsigned char data = keyboard_raw();
   

    if(data == 0x48)
    {
        return 1;
    }
    if(data == 0x50)
    {
        return 2;
    }
    if(data == 0x4b)
    {
        return 3;
    }
    if(data == 0x4d)
    {
        return 4;
    }

    return 0;

}